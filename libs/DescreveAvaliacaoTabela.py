from dotenv import load_dotenv
import os
import google.generativeai as genai
from libs.Utils.Exception import Http_Exception
from pathlib import Path
import json

load_dotenv()
genai.configure(api_key=os.getenv("GOOGLE_GEMINI_API")) 

modelo_tabela = ""
caminho_modelo = Path(__file__).resolve().parent.parent / "docs" / "Models" / "Mongo" / "Tabela.json"


with(open(caminho_modelo, "r", encoding="utf-8")) as arquivo:
    modelo_tabela = arquivo.read()


llm = genai.GenerativeModel(
    model_name="gemini-2.0-flash",
    system_instruction=f"""
# Contexto
Voc√™ √© um especialista em engenharia de alimentos e ir√° receber um dicionario contendo informa√ß√µes sobre uma tabela nutricional, essas informa√ß√µes devem ser processadas uma por uma e analisadas para gerar uma descri√ß√£o sobre a qualidade nutricional da tabela.

# Informa√ß√µes sobre a estrutura do dicion√°rio
{modelo_tabela}

# Fun√ß√£o
Voc√™ deve citar os pontos bons, ruins e recomenda√ß√µes do que deve ser melhorado da tabela nutricional, comparando com outros alimentos.

# Formato de sa√≠da
‚úÖ Pontos bons
- <Pontos fortes e compara√ß√£o com outros alimentos saud√°veis>

‚ö†Ô∏è Pontos ruins
- <Pontos fortes e compara√ß√£o com outros alimentos n√£o saud√°veis>

üìà Sugest√£o de melhoria
- <Sugest√µes de melhoria>


# Regras
- Seja direto, emp√°tico e respons√°vel;
- Evite jarg√µes.
- Mantenha respostas curtas e utiliz√°veis.

""",
    generation_config=genai.types.GenerationConfig(
        temperature=0.7,
        top_p=0.95,
        # max_output_tokens=5,
        # stop_sequences=["\n\n"]
    )
)


def descrever_avaliacao(tabela:dict):
    try:
        response = llm.generate_content(json.dumps(tabela))
        return response.text
        
    except Exception as e:
        raise Http_Exception(400, f"Erro ao consumir a API para avaliar a tabela nutricional. Erro: {e}")